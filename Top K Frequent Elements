//https://leetcode.com/problems/top-k-frequent-elements/
class Solution {
public:
     struct Node{
            int val;
            int freq;
            Node(int val_, int freq_): val(val_), freq(freq_){}
        };
    
    void siftDown(vector<Node>& heap, int i){
        while (2*i+1<heap.size()){
             int left=2*i+1;
             int right=2*i+2;
                int j=left;
        if (right<heap.size() && (heap[right]).freq>(heap[j]).freq){
            j=right;
            }
        if ((heap[i]).freq>=(heap[j]).freq) break;
        swap(heap[i],heap[j]);
        i=j;
        }
    }
    
    Node extractMax(vector<Node>& heap){
        Node max=heap[0];
        swap(heap[0], heap[heap.size()-1]);
        heap.erase(heap.begin()+heap.size()-1);
        siftDown(heap,0);
        return max;
    }
    void SiftUp(vector<Node>& heap, size_t i){
    int par=(i-1)/2;
        while (i>0 && heap[par].freq< heap[i].freq){
        swap(heap[i], heap[par]);
            i=par;
            par=(i-1)/2;
        }
        
    }
    
    void Insert(vector<Node>& heap, Node x){
        heap.push_back(x);
        SiftUp(heap, heap.size()-1);
    }
    
Node extractMin(vector<Node> & heap){
    Node min=heap[0];
    swap(heap[0], heap[heap.size()-1]);
    heap.erase(heap.begin()+heap.size()-1);
    siftDown(heap,0);
    return min;
}
    
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        for (int a:nums){
            m[a]+=1;
        }
       vector<Node> heap;
        for (auto it = m.begin(); it != m.end(); ++it){
            Insert(heap, Node(it->first, it->second));
        }
        vector<int> res;
        for (int i=0; i<k; ++i){
            res.push_back(extractMax(heap).val);
        }
        return res;
    }
};
