https://leetcode.com/problems/word-ladder-ii/

class Solution {
public:

	vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList)
	{
		map<string, pair<int, vector<string>>> graph;
		set<string> dict;
		vector<vector<string> > result;

		for (auto& s : wordList) {
			dict.insert(s);
		}

		graph[beginWord].first = 0;
		graph[beginWord].second.push_back("");


		deque<pair<string, int>> deque;
		deque.push_back({ beginWord, 1 });

		while (!deque.empty()) {
			pair<string,int> front = deque.front();
			string word = front.first;
			int count = front.second;
			deque.pop_front();

			for (int i = 0; i < word.size(); ++i) {
				string temp = word;
				for (char j = 'a'; j <= 'z'; ++j) {
					temp[i] = j;

					if (dict.find(temp) != dict.end()) {
						if (graph.find(temp) == graph.end()) {
							deque.emplace_back(temp, count + 1);
						}

						if (graph.find(temp) == graph.end() ||
							graph[temp].first >= count) {
							graph[temp].first = count;
							graph[temp].second.push_back(word);
						}
					}
				}
			}
		}

		vector<string> totalres;
		getAllResults(graph, endWord, totalres, result);
		return result;
	}


	void getAllResults(map<string, pair<int, vector<string> > >& graph,	const string& word,	vector<string> totalres, vector<vector<string> >& result) {
		if (word.empty()) {
			if (!totalres.empty()) {
				reverse(totalres.begin(), totalres.end());
				result.push_back(totalres);
			}

			return;
		}

		totalres.push_back(word);
		for (const auto& w : graph[word].second) {
			getAllResults(graph, w, totalres, result);
		}
	}
};
